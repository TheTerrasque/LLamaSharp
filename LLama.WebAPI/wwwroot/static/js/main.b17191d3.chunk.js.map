{"version":3,"sources":["interfaces/ApiStructures.ts","services/ChatTree.ts","services/logger.ts","services/api.ts","components/ApiKeyInput.tsx","components/parts/CodeBlock.tsx","components/parts/TextArea.tsx","components/ChatMessage.tsx","components/ChatTitle.tsx","components/parts/ChatInput.tsx","components/Chat.tsx","components/ChatListEntry.tsx","components/ChatList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChatRole","Model","ChatState","Chat","title","_classCallCheck","this","chatStart","keep_first","id","nanoid","max_tokens","ChatEntry","content","role","INTERNAL","makeObservable","observable","addChatMessage","action","updateEntry","ChatTokens","computed","setTitle","setKeepFirst","importSimpleChat","_createClass","key","value","chat","_this","forEach","message","getChats","map","entry","activeChat","getActiveChild","parent","addChild","getMessageChain","find","lm","getChat","active_child_index","chatList","used_tokens","chats","filter","reverse","first","pop","push","estimateNumTokens","every","chatMessage","unshift","cl","get","reduce","acc","ChatsManager","activeChatIndex","addChat","setActiveChat","getActiveChat","localStorage","setItem","JSON","stringify","getItem","parse","length","index","findIndex","console","log","arguments","undefined","state","Finished","children","nextChild","previousChild","updateText","updateState","isNextChild","isPreviousChild","setRole","words","split","chars","Math","round","child","newText","min","max","chain","_console","timestamp","Date","toLocaleTimeString","_len","args","Array","_key","apply","concat","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","FatalError","_Error","_possibleConstructorReturn","_getPrototypeOf","_inherits","_wrapNativeSuper","ApiProfile","bearerToken","model","backgroundColor","systemText","chatsManager","api","OpenAIChatAPI","getBearerToken","getModel","getName","substring","ApiProfileManager","profiles","activeProfile","addProfile","setActiveProfile","profile","abortController","AbortController","apiURL","total_tokens","abort","_sendStreamingChatMessage","_asyncToGenerator","_callee2","messages","messageNewTokenCallback","messageEndCallback","_context2","fetchEventSource","signal","headers","Content-Type","Authorization","onmessage","event","data","myData","onopen","_onopen","_callee","response","_context","ok","text","txt","_x4","onerror","onclose","body","stream","_x","_x2","_x3","_sendChatMessage","_callee3","json","_context3","fetch","status","usage","_x5","apiManager","APIKeyInput","_useState","useState","_useState2","_slicedToArray","apiKey","setApiKey","_useState3","_useState4","setName","navigate","useNavigate","useEffect","ChatGPT","React","createElement","href","target","className","htmlFor","onChange","e","autoFocus","onClick","CodeBlock","_ref","props","_objectWithoutProperties","match","exec","SyntaxHighlighter","assign","style","docco","PreTag","language","String","replace","TextAreaView","onKeyDown","textareaRef","useRef","textarea","current","height","scrollHeight","readOnly","ReactMarkdown","components","code","OnChange","ref","resize","ChatMessageView","observer","contentText","setContentText","isEditing","setIsEditing","FontAwesomeIcon","icon","faChevronLeft","faChevronRight","faCheck","faXmark","ASSISTANT","ERROR","faRepeat","faPenToSquare","ChatTitle","chatTitle","setChatTitle","chatTitleEdit","setChatTitleEdit","faSave","faCancel","faEdit","ChatInput","setText","sendText","shiftKey","preventDefault","ChatView","IsWaiting","setIsWaiting","setError","_useState5","_useState6","fileContent","setFileContent","API","setFavicon","icons","document","querySelectorAll","QueryChatBot","cm","Waiting","chatMessages","cem","sendChatMessage","choices","trim","ce","USER","ce2","hasChats","exportSimpleChat","fileData","blob","Blob","url","URL","createObjectURL","link","download","click","faDownload","files","file","reader","FileReader","onload","readAsText","faUpload","ccm","defaultChecked","ChatListEntry","isActive","ChatList","ChatsData","getActiveProfile","Navigate","to","chatEntry","App","BrowserRouter","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b17191d3.chunk.js","sourcesContent":["export enum ChatRole {\r\n    USER = 'user',\r\n    ASSISTANT = 'assistant',\r\n    SYSTEM = 'system',\r\n    INTERNAL = 'internal',\r\n    ERROR = 'error',\r\n  }\r\n\r\nexport enum Model {\r\n    ChatGPT = \"gpt-3.5-turbo\",\r\n}\r\n\r\n\r\nexport interface ApiResponse {\r\n    id: string;\r\n    object: string;\r\n    created: number;\r\n    model: Model;\r\n    usage: ChatUsage;\r\n    choices: ChatChoice[];\r\n}\r\n\r\nexport interface ChatUsage {\r\n    prompt_tokens: number;\r\n    completion_tokens: number;\r\n    total_tokens: number;\r\n}\r\n\r\nexport interface ChatChoice {\r\n    message: ChatMessage;\r\n    finish_reason: string;\r\n    index: number;\r\n}\r\n\r\nexport interface ChatMessage {\r\n    role: ChatRole;\r\n    content: string;\r\n}\r\n\r\nexport interface ChatInput {\r\n    model: Model;\r\n    messages: ChatMessage[];\r\n  }","import { makeObservable, observable, action, computed } from \"mobx\"\r\nimport { nanoid } from \"nanoid\";\r\nimport { ChatMessage, ChatRole } from \"../interfaces/ApiStructures\";\r\n\r\n\r\nexport enum ChatState {\r\n    Finished = \"finished\",\r\n    Waiting = \"waiting\",\r\n}\r\n\r\nexport class Chat {\r\n    chatStart: ChatEntry;\r\n    title: string;\r\n    keep_first: boolean = true;\r\n    id = nanoid();\r\n    max_tokens: number = 1000;\r\n    \r\n    constructor(title: string) {\r\n        this.title = title;\r\n        this.chatStart = new ChatEntry({content: \"*internal*\", role: ChatRole.INTERNAL});\r\n\r\n        makeObservable(this, {\r\n            chatStart: observable,\r\n            addChatMessage: action,\r\n            title: observable,\r\n            updateEntry: action,\r\n            ChatTokens: computed,\r\n            setTitle: action,\r\n            setKeepFirst: action,\r\n            importSimpleChat: action,\r\n        })\r\n    }\r\n\r\n    get ChatTokens(): number {\r\n        return this.getChats().reduce((acc, chat) => acc + chat.estimateNumTokens(), 0);\r\n    }\r\n\r\n    importSimpleChat(chat: ChatMessage[]) {\r\n        this.chatStart = new ChatEntry({ content: \"*internal*\", role: ChatRole.INTERNAL });\r\n        chat.forEach(message => {\r\n            this.addChatMessage(message);\r\n        })\r\n    }\r\n\r\n    exportSimpleChat(): ChatMessage[] {\r\n        return this.getChats().map(chat => chat.message);\r\n    }\r\n\r\n    setTitle(title: string) {\r\n        this.title = title;\r\n    }\r\n\r\n    setKeepFirst(keep_first: boolean) {\r\n        this.keep_first = keep_first;\r\n    }\r\n\r\n    addChatMessage(message: ChatMessage): ChatEntry | null{\r\n        const entry = new ChatEntry(message);\r\n\r\n        if (this.chatStart === null) {\r\n            this.chatStart = entry;\r\n            return null;\r\n        }\r\n\r\n        let activeChat = this.chatStart.getActiveChild;\r\n        let parent = this.chatStart;\r\n        //need parent\r\n        while (activeChat !== null) {\r\n            parent = activeChat;\r\n            activeChat = activeChat.getActiveChild;\r\n        }\r\n        parent.addChild(entry);\r\n        return entry;\r\n    }\r\n\r\n    getChat(id: string): ChatEntry | undefined {\r\n        if (this.chatStart === null) {return undefined;}\r\n        return this.chatStart.getMessageChain().find(chat => chat.id === id);\r\n    }\r\n\r\n    updateEntry(id: string, message?: string) : boolean {\r\n        let lm = this.getChat(id);\r\n        if (lm) {\r\n            lm.active_child_index = null;\r\n            if (message) {\r\n                lm.message.content = message;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getChats(max_tokens?: number): ChatEntry[] {\r\n        if (this.chatStart === null) {\r\n            return [];\r\n        }\r\n        let chatList = [];\r\n        let used_tokens = 0;\r\n        let chats = this.chatStart.getMessageChain().filter(chat => chat.message.role !== ChatRole.INTERNAL);\r\n        chats = chats.reverse();\r\n\r\n        if (this.keep_first) {\r\n            let first = chats.pop();\r\n            if (first) {\r\n                chatList.push(first);\r\n                used_tokens += first.estimateNumTokens();\r\n            }\r\n        }\r\n        chats.every(chatMessage => {\r\n            if (max_tokens && used_tokens + chatMessage.estimateNumTokens() > max_tokens) {\r\n                return false;\r\n            }\r\n            chatList.unshift(chatMessage);\r\n            used_tokens += chatMessage.estimateNumTokens();\r\n            return true;\r\n        })\r\n        if (this.keep_first) {\r\n            var cl = chatList.pop();\r\n            if (cl) {\r\n                chatList.unshift(cl);\r\n            }\r\n        }\r\n        return chatList;\r\n    }\r\n\r\n}\r\n\r\nexport class ChatsManager {\r\n    chats: Chat[] = [];\r\n    activeChatIndex: number | null = null;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            chats: observable,\r\n            activeChatIndex: observable,\r\n            addChat: action,\r\n            setActiveChat: action,\r\n            getChats: computed,\r\n            getActiveChat: computed,\r\n        })\r\n    }\r\n\r\n    save() {\r\n        localStorage.setItem(\"chats\", JSON.stringify(this.chats));\r\n    }\r\n\r\n    load() {\r\n        const chats = localStorage.getItem(\"chats\");\r\n        if (chats) {\r\n            this.chats = JSON.parse(chats);\r\n        }\r\n    }\r\n\r\n    addChat(chat: Chat) {\r\n        this.chats.push(chat);\r\n        this.activeChatIndex = this.chats.length - 1;\r\n    }\r\n\r\n    setActiveChat(id: string) {\r\n        const index = this.chats.findIndex(chat => chat.id === id);\r\n        if (index === -1) {\r\n            console.log(\"setActiveChat: Chat not found\", id)\r\n            return;\r\n        }\r\n        console.log(\"setActiveChat: Chat found\", id, index)\r\n        this.activeChatIndex = index;\r\n    }\r\n\r\n    get getActiveChat(): Chat | null {\r\n        if (this.activeChatIndex === null) {\r\n            return null;\r\n        }\r\n        return this.chats[this.activeChatIndex];\r\n    }\r\n\r\n    get getChats(): Chat[] {\r\n        return this.chats;\r\n    }\r\n}\r\n\r\nexport class ChatEntry {\r\n    message: ChatMessage;\r\n    id = nanoid();\r\n\r\n    state: ChatState = ChatState.Finished;\r\n    parent: ChatEntry | null;\r\n    children: ChatEntry[] = [];\r\n    active_child_index: number | null = null;\r\n\r\n    constructor(message: ChatMessage, parent: ChatEntry | null = null, state? : ChatState) {\r\n        this.message = message;\r\n        this.parent = parent;\r\n        if (state) {\r\n            this.state = state;\r\n        }\r\n        makeObservable(this, {\r\n            message: observable,\r\n            children: observable,\r\n            active_child_index: observable,\r\n            parent: observable,\r\n            state: observable,\r\n            nextChild: action,\r\n            previousChild: action,\r\n            addChild: action,\r\n            updateText: action,\r\n            updateState: action,\r\n            getActiveChild: computed,\r\n            isNextChild: computed,\r\n            isPreviousChild: computed,\r\n            setRole: action,\r\n        })\r\n    }\r\n\r\n    estimateNumTokens(): number {\r\n        let words = this.message.content.split(\" \").length / 0.75;\r\n        let chars = this.message.content.length / 4;\r\n        return Math.round((words + chars) / 2);\r\n    }\r\n\r\n    setRole(role: ChatRole) {\r\n        this.message.role = role;\r\n    }\r\n\r\n    addChild(child: ChatEntry) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n        this.active_child_index = this.children.length - 1;\r\n    }\r\n\r\n    updateState(state: ChatState) {\r\n        console.log(\"updateState\", this, state)\r\n        this.state = state;\r\n    }\r\n\r\n    updateText(newText: string) {\r\n        console.log(\"updateText\", this)\r\n        this.message = {content: newText, role: this.message.role}\r\n        this.state = ChatState.Finished;\r\n    }\r\n\r\n    get getActiveChild(): ChatEntry | null {\r\n        console.log(\"getActiveChild\", this)\r\n        if (this.active_child_index === null) {\r\n            return null;\r\n        }\r\n\r\n        return this.children[this.active_child_index];\r\n    }\r\n\r\n    get isNextChild(): boolean {\r\n        if (this.active_child_index === null) {\r\n            return false;\r\n        }\r\n        if (this.children.length === 0) {\r\n            return false;\r\n        }\r\n        if (this.active_child_index === this.children.length - 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    get isPreviousChild(): boolean {\r\n        if (this.active_child_index === null) {\r\n            return false;\r\n        }\r\n        if (this.children.length === 0) {\r\n            return false;\r\n        }\r\n        if (this.active_child_index === 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    nextChild() {\r\n        if (this.active_child_index === null) {\r\n            return;\r\n        }\r\n\r\n        this.active_child_index = Math.min(this.active_child_index + 1, this.children.length);\r\n    }\r\n\r\n    previousChild() {\r\n        console.log(\"previousChild\", this)\r\n        if (this.active_child_index === null) {\r\n            return;\r\n        }\r\n\r\n        this.active_child_index = Math.max(this.active_child_index - 1, 0);\r\n    }\r\n\r\n    getMessageChain(): ChatEntry[] {\r\n        let chain: ChatEntry[] = [];\r\n        let entry: ChatEntry | null = this;\r\n        while (entry !== null) {\r\n            chain.push(entry);\r\n            entry = entry.getActiveChild;\r\n        }\r\n        return chain;\r\n    }\r\n}","\r\nexport function log(...args: any[]) {\r\n    // timestamp\r\n    const date = new Date();\r\n    const timestamp = date.toLocaleTimeString();\r\n    console.log(timestamp, ...args);\r\n}","import { nanoid } from \"nanoid\";\r\nimport { ApiResponse, ChatMessage, Model } from \"../interfaces/ApiStructures\";\r\nimport { makeObservable, observable, action, computed } from \"mobx\"\r\nimport { ChatsManager } from \"./ChatTree\";\r\nimport { EventSourceMessage, fetchEventSource } from '@microsoft/fetch-event-source';\r\nimport { log } from \"./logger\";\r\n\r\nclass FatalError extends Error { }\r\n\r\ninterface ApiError {\r\n    error: {\r\n        message: string;\r\n        type: string;\r\n        code: string;\r\n    }\r\n}\r\n\r\nexport class ApiProfile {\r\n    private bearerToken: string;\r\n    private model: Model;\r\n    private name: string;\r\n\r\n    backgroundColor: string = '';\r\n    systemText: string = '';\r\n\r\n    id = nanoid();\r\n\r\n    chatsManager = new ChatsManager();\r\n    api: OpenAIChatAPI;\r\n\r\n    constructor(name: string, bearerToken: string, model: Model) {\r\n        this.bearerToken = bearerToken;\r\n        this.model = model;\r\n        this.name = name;\r\n        this.api = new OpenAIChatAPI(this);\r\n        makeObservable(this, {\r\n            backgroundColor: observable,\r\n            systemText: observable,\r\n            getBearerToken: computed,\r\n            getModel: computed,\r\n            getName: computed,\r\n        });\r\n    }\r\n\r\n    get getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    get getBearerToken(): string {\r\n        return this.bearerToken;\r\n    }\r\n\r\n    getCensoredBearerToken(): string {\r\n        return this.bearerToken.substring(0, 4) + '...' + this.bearerToken.substring(this.bearerToken.length - 4, this.bearerToken.length);\r\n    }\r\n\r\n    get getModel(): Model {\r\n        return this.model;\r\n    }\r\n}\r\n\r\nexport class ApiProfileManager {\r\n    profiles: ApiProfile[] = [];\r\n    activeProfile: ApiProfile | null = null;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            profiles: observable,\r\n            addProfile: action,\r\n            setActiveProfile: action,\r\n            activeProfile: observable,\r\n        });\r\n    }\r\n\r\n    getActiveProfile(): ApiProfile | null {\r\n        return this.activeProfile;\r\n    }\r\n\r\n    setActiveProfile(profile: ApiProfile) {\r\n        this.activeProfile = profile;\r\n    }\r\n\r\n    addProfile(profile: ApiProfile) {\r\n        this.profiles.push(profile);\r\n    }\r\n\r\n    getProfile(id: string): ApiProfile {\r\n        return this.profiles.filter(profile => profile.id === id)[0];\r\n    }\r\n\r\n    getProfiles(): ApiProfile[] { \r\n        return this.profiles;\r\n    }\r\n}\r\nexport interface ChatCompletionDelta {\r\n    choices: DeltaChoice[];\r\n    created: number;\r\n    id: string;\r\n    model: string;\r\n    object: string;\r\n}\r\n  \r\ninterface DeltaChoice {\r\n    delta: Delta;\r\n    finish_reason: string | null;\r\n    index: number;\r\n}\r\n\r\ninterface Delta {\r\n    content?: string;\r\n    role?: string;\r\n}\r\n  \r\n\r\nexport class OpenAIChatAPI {\r\n    profile: ApiProfile;\r\n    abortController = new AbortController();\r\n    private apiURL: string = '/v1/chat/completions';\r\n\r\n    total_tokens: number = 0;\r\n\r\n    constructor(profile: ApiProfile) {\r\n        this.profile = profile;\r\n        makeObservable(this, {\r\n            total_tokens: observable,\r\n            profile: observable,\r\n        });\r\n    }\r\n\r\n    abort() {\r\n        this.abortController.abort();\r\n    }\r\n\r\n    async sendStreamingChatMessage(messages: ChatMessage[], messageNewTokenCallback: (data: ChatCompletionDelta) => void, messageEndCallback: () => void): Promise<void> {\r\n        this.abortController = new AbortController();\r\n        log(\"sendStreamingChatMessage\", messages);\r\n        const response = await fetchEventSource(this.apiURL, {\r\n            method: 'POST',\r\n            signal: this.abortController.signal,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${this.profile.getBearerToken}`,\r\n            },\r\n            onmessage: (event: EventSourceMessage) => {\r\n                if (event.data == \"[DONE]\") {\r\n                    messageEndCallback()\r\n                } else {\r\n                    log(\"onmessage\", event.data);\r\n                    const myData: ChatCompletionDelta = JSON.parse(event.data);\r\n                    messageNewTokenCallback(myData);\r\n                }\r\n            },\r\n            onopen: async (response: Response) => { if (response.ok) return; response.text().then((txt: string) => { throw new FatalError(txt); }); },\r\n            onerror: (error: Error) => { throw new FatalError(error.message); },\r\n            onclose: () => { log(\"Stream Closed\"); },\r\n            body: JSON.stringify({\r\n                model: this.profile.getModel,\r\n                max_tokens: 512,\r\n                messages: messages,\r\n                stream: true,\r\n            }),\r\n        });\r\n    }\r\n\r\n    async sendChatMessage(messages: ChatMessage[]): Promise<ApiResponse> {\r\n        this.abortController = new AbortController();\r\n        const response = await fetch(this.apiURL, {\r\n            method: 'POST',\r\n            signal: this.abortController.signal,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${this.profile.getBearerToken}`,\r\n            },\r\n            body: JSON.stringify({\r\n                model: this.profile.getModel,\r\n                messages: messages,\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            return response.json().then((text: ApiError) => { throw new Error(`HTTP error! [${response.status}] ${text.error.message}`) })\r\n        }\r\n        \r\n        const json: ApiResponse = await response.json();\r\n        this.total_tokens += json.usage.total_tokens;\r\n        return json;\r\n    }\r\n\r\n    getTotalTokens(): number {\r\n        return this.total_tokens;\r\n    }\r\n}\r\n\r\nexport const apiManager = new ApiProfileManager();","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Model } from '../interfaces/ApiStructures';\r\nimport { ApiProfile, apiManager } from '../services/api';\r\nimport { Chat } from '../services/ChatTree';\r\n\r\nexport function APIKeyInput() {\r\n    const [apiKey, setApiKey] = useState('');\r\n    const [name, setName] = useState('Default profile');\r\n    const navigate = useNavigate();\r\n    \r\n    const handleApiKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setApiKey(event.target.value);\r\n    };\r\n\r\n    useEffect(() => { \r\n        const profile = new ApiProfile(name, apiKey, Model.ChatGPT);\r\n        apiManager.addProfile(profile);\r\n        apiManager.setActiveProfile(profile);\r\n        profile.chatsManager.addChat(new Chat(\"Chat\") );\r\n        navigate(\"/chats\")\r\n    }, []);\r\n\r\n    const handleCreateAPI = () => {\r\n        if (apiKey.length === 0) { return; }\r\n        const profile = new ApiProfile(name, apiKey, Model.ChatGPT);\r\n        apiManager.addProfile(profile);\r\n        apiManager.setActiveProfile(profile);\r\n        profile.chatsManager.addChat(new Chat(\"Chat\") );\r\n        navigate(\"/chats\")\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    To be able to access ChatGPT you need an OpenAI account. You will also need an API key so OpenAI can know it's you that's chatting with ChatGPT\r\n                </div>\r\n                <a href=\"https://platform.openai.com/account/api-keys\" target=\"_new\">You can create an API key here</a>\r\n            </div>\r\n            \r\n            <div className='input-group'>\r\n                <label htmlFor=\"api-key-input\" className=\"input-group-text\">Profile name</label>\r\n                <input id=\"api-key-input\" className='form-control' type=\"text\" value={name} onChange={(e) => setName(e.target.value)}/>\r\n            </div>\r\n            <div className='input-group'>\r\n                <label htmlFor=\"api-key-input\" className=\"input-group-text\">OpenAI API key</label>\r\n                <input id=\"api-key-input\" className='form-control' type=\"text\" value={apiKey} onChange={handleApiKeyChange} autoFocus/>\r\n                <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={handleCreateAPI}>Save key</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { CodeProps } from \"react-markdown/lib/ast-to-react\";\r\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\n\r\nconst CodeBlock = ({ className, children, ...props }: CodeProps) => {\r\n  const match = /language-(\\w+)/.exec(className || \"\");\r\n  return (\r\n    <SyntaxHighlighter\r\n      {...props}\r\n      style={docco}\r\n      PreTag=\"div\"\r\n      language={match ? match[1] : \"language-shell\"}\r\n    >\r\n      {String(children).replace(/\\n$/, \"\")}\r\n    </SyntaxHighlighter>\r\n  );\r\n};\r\n\r\nexport default CodeBlock;","import React, { useEffect, useRef } from 'react';\r\nimport { ReactMarkdown } from 'react-markdown/lib/react-markdown';\r\nimport CodeBlock from './CodeBlock';\r\n\r\nexport function TextAreaView(props: { text: string, OnChange: (text: string) => void, readOnly: boolean }, onKeyDown?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n    \r\n    function handleChange(event: any) {\r\n        props.OnChange(event.target.value);\r\n        event.target.style.height = 'auto';\r\n        event.target.style.height = `${event.target.scrollHeight}px`;\r\n    }\r\n\r\n    useEffect(() => {\r\n      const textarea = textareaRef.current;\r\n      if (!textarea) return;\r\n        textarea.style.height = 'auto';\r\n        textarea.style.height = `${textarea.scrollHeight}px`;\r\n      }, [props.readOnly]);    \r\n    \r\n    if (props.readOnly) {\r\n        return <ReactMarkdown\r\n        components={{\r\n          code: (props) => <CodeBlock {...props} />,\r\n        }}>\r\n        {props.text}\r\n      </ReactMarkdown>\r\n    }\r\n    return <textarea className=\"form-control\" value={props.text} readOnly={props.readOnly} onChange={handleChange} ref={textareaRef} style={{ resize: 'none' }}></textarea>\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faChevronLeft, faChevronRight, faRepeat, faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ChatRole } from '../interfaces/ApiStructures';\r\nimport { ChatEntry } from '../services/ChatTree';\r\nimport './ChatMessage.css';\r\nimport { TextAreaView } from './parts/TextArea';\r\nimport { faPenToSquare } from '@fortawesome/free-regular-svg-icons';\r\nimport { observer } from 'mobx-react';\r\n\r\nexport function ChatMessageViewInner(props: { entry: ChatEntry, updateEntry: (id: string, content?: string) => void }) {\r\n    const [contentText, setContentText] = useState<string>(props.entry.message.content);\r\n    const [isEditing, setIsEditing] = useState<boolean>(false);\r\n\r\n    const previousChild = props.entry.parent != null && props.entry.parent.isPreviousChild\r\n    const nextChild = props.entry.parent != null && props.entry.parent.isNextChild\r\n    \r\n    useEffect(() => {\r\n        setContentText(props.entry.message.content);\r\n      }, [props.entry.message.content]);\r\n\r\n    function gotoNextChild() {\r\n        if (props.entry.parent != null) {\r\n            props.entry.parent.nextChild();\r\n        }\r\n    }\r\n\r\n    function gotoPreviousChild() {\r\n        if (props.entry.parent != null) {\r\n            props.entry.parent.previousChild();\r\n        }\r\n    }\r\n\r\n    function EditText() {\r\n        props.updateEntry(props.entry.id, contentText);\r\n        setIsEditing(false);\r\n    }\r\n\r\n    function AbortEdit() {\r\n        setContentText(props.entry.message.content);\r\n        setIsEditing(false);\r\n    }\r\n\r\n    return (\r\n        <div className='chatEntry d-flex'>\r\n            <div className='chatAvatar p-2'>\r\n                {props.entry.message.role}\r\n                <div className=\"d-flex\">\r\n                    {previousChild && <div className='chatAvatarArrow m-2 clickable' onClick={gotoPreviousChild} >\r\n                        <FontAwesomeIcon icon={faChevronLeft} />\r\n                    </div>}\r\n                    {nextChild && <div className='chatAvatarArrow m-2 clickable' onClick={gotoNextChild} >\r\n                        <FontAwesomeIcon icon={faChevronRight} />\r\n                    </div>}\r\n                </div>\r\n                {isEditing && \r\n                    <div className=\"d-flex\">\r\n                        <div>\r\n                            <FontAwesomeIcon icon={faCheck} className=\"m-2 clickable\" onClick={EditText}/>\r\n                        </div>\r\n                        <div>\r\n                            <FontAwesomeIcon icon={faXmark} className=\"m-2 clickable\" onClick={AbortEdit}/>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {!isEditing && <div className=\"d-flex\">\r\n                    {(props.entry.message.role == ChatRole.ASSISTANT || props.entry.message.role === ChatRole.ERROR) && props.entry.parent &&\r\n                        <div onClick={() => props.entry.parent && props.updateEntry(props.entry.id)} className=\"m-2  clickable\">\r\n                            <FontAwesomeIcon icon={faRepeat} />\r\n                        </div>}\r\n                    {props.entry.message.role != ChatRole.ERROR && <div>\r\n                        <FontAwesomeIcon icon={faPenToSquare} className=\"m-2  clickable\" onClick={() => setIsEditing(true)} />\r\n                    </div>}\r\n                </div>}\r\n            </div>\r\n            <div className={'chatMessage p-2 role-' + props.entry.message.role} >\r\n            <TextAreaView text={contentText} OnChange={setContentText} readOnly={!isEditing} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ChatMessageView = observer(ChatMessageViewInner);","import { faCancel, faEdit, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Chat } from '../services/ChatTree';\r\n\r\nexport function ChatTitle(props: { chat: Chat }) {\r\n    const [chatTitle, setChatTitle] = useState(props.chat.title);\r\n    const [chatTitleEdit, setChatTitleEdit] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setChatTitle(props.chat.title);\r\n     }, [props.chat.title]);\r\n\r\n    return (\r\n        <div className=\"chat-title\">\r\n            {chatTitleEdit && <div className='input-group'>\r\n                <input type=\"text\" autoFocus className='form-control' value={chatTitle} onChange={(e) => setChatTitle(e.target.value)} /> \r\n                <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => { props.chat.setTitle(chatTitle); setChatTitleEdit(false); }}><FontAwesomeIcon icon={faSave} /></button>\r\n                <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => setChatTitleEdit(false)}><FontAwesomeIcon icon={faCancel} /></button>\r\n            </div>}\r\n            {!chatTitleEdit && <div className='d-flex'>\r\n                <h4 className=\"chat-title-name\">{props.chat.title}</h4>\r\n                <div className=\"chat-title-edit px-2 clickable\" onClick={() => setChatTitleEdit(true)}><FontAwesomeIcon icon={faEdit} /> </div>\r\n            </div>}\r\n        </div>\r\n    );\r\n}","import { observer } from 'mobx-react';\r\nimport React, { useState } from 'react';\r\n\r\nfunction ChatInputInner(props: { onChange: (e: string) => void }) {\r\n    const [text, setText] = useState<string>('');\r\n\r\n\r\n    function sendText() {\r\n        props.onChange(text);\r\n        setText('');\r\n    }\r\n\r\n    function handleKeyDown(event: React.KeyboardEvent<HTMLTextAreaElement>) {\r\n        if (event.key === 'Enter' && !event.shiftKey) {\r\n            // Handle Enter key press here\r\n            event.preventDefault(); // prevent default behavior (e.g. submitting a form)\r\n            sendText();\r\n        }\r\n    }\r\n\r\n    return <div className='input-group chatInput m-2'>\r\n\r\n        <span className=\"input-group-text\">You</span>\r\n        <textarea className=\"form-control\" value={text} onChange={(e) => setText(e.target.value)} autoFocus onKeyDown={handleKeyDown}></textarea>\r\n        <button onClick={sendText} className=\"btn btn-outline-secondary\" type=\"button\">Send</button>\r\n    </div>\r\n}\r\n\r\nexport const ChatInput = observer(ChatInputInner);","import React, { useState } from 'react';\r\nimport { ChatMessage, ChatRole } from '../interfaces/ApiStructures';\r\nimport { Chat, ChatEntry, ChatState } from '../services/ChatTree';\r\nimport { ChatMessageView } from './ChatMessage';\r\nimport './Chat.css';\r\nimport { observer } from 'mobx-react';\r\nimport { apiManager } from '../services/api';\r\nimport { ChatTitle } from './ChatTitle';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCancel, faDownload, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { ChatInput } from './parts/ChatInput';\r\n\r\nexport function ChatViewInner(props: { chat: Chat | null }) {\r\n    const [IsWaiting, setIsWaiting] = useState<boolean>(false);\r\n    const [error, setError] = useState<string>('');\r\n    const [fileContent, setFileContent] = useState('');\r\n\r\n    const API = apiManager.activeProfile && apiManager.activeProfile.api;\r\n\r\n    const uploadChat = () => { \r\n        if (props.chat == null) { return; }\r\n\r\n        try {\r\n            var chats = JSON.parse(fileContent) as ChatMessage[];\r\n            props.chat.importSimpleChat(chats);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target == null || event.target.files == null || event.target.files.length == 0) { return; }\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (event) => {\r\n            if (event.target == null) { return; }\r\n            setFileContent(event.target.result as string);\r\n        };\r\n\r\n        reader.readAsText(file as Blob);\r\n    }\r\n\r\n    if (props.chat == null) {\r\n        return <div></div>;\r\n    }\r\n\r\n    function saveChat() {\r\n        if (props.chat == null) { return; }\r\n\r\n        var chats = props.chat.exportSimpleChat();\r\n\r\n        const fileData = JSON.stringify(chats);\r\n        const blob = new Blob([fileData], { type: \"text/plain\" });\r\n        const url = URL.createObjectURL(blob);\r\n        const link = document.createElement(\"a\");\r\n        link.download = `ChatGPT-${props.chat.title}.json`;\r\n        link.href = url;\r\n        link.click();\r\n    }\r\n\r\n    function sendText(text: string) {\r\n        if (API == null || props.chat == null || IsWaiting) { return; }\r\n\r\n        props.chat.addChatMessage({ content: text, role: ChatRole.USER });\r\n        let ccm = props.chat.addChatMessage({ content: '...', role: ChatRole.ASSISTANT });\r\n        if (ccm != null)\r\n            QueryChatBot(ccm);\r\n    }\r\n\r\n    function setFavicon(icon: string) {\r\n        var icons: NodeListOf<HTMLLinkElement> = document.querySelectorAll(\"head link[rel='icon']\");\r\n\r\n        // loop through the elements and change their href\r\n        for (var i = 0; i < icons.length; i++) {\r\n            icons[i].href = `icons/favicon-32x32-${icon}.png`;\r\n        }\r\n    }\r\n\r\n    function QueryChatBot(cm: ChatEntry) {\r\n        if (API == null || props.chat == null || IsWaiting || !apiManager.activeProfile) { return; }\r\n\r\n        setIsWaiting(true);\r\n        setError('');\r\n        setFavicon(\"blue\");\r\n        cm.updateState(ChatState.Waiting);\r\n        let tempcm = props.chat.getChats(props.chat.max_tokens);\r\n        let tempcm2 = tempcm.filter((cem) => { console.log(cem.state, cem.id); return cem.state != ChatState.Waiting && cem.message.role != ChatRole.ERROR && cem.id != cm.id });\r\n        let chatMessages = tempcm2.map((cem) => cem.message);\r\n\r\n        // API.sendStreamingChatMessage(chatMessages, (response) => {\r\n        //     // Stream data\r\n        //     if (props.chat == null) { return; }\r\n        //     if (response.choices.length == 0) { return; }\r\n        //     if (response.choices[0].delta.content != undefined && response.choices[0].delta.content.trim() != \"\") { \r\n        //         cm.updateText(cm.message.content + response.choices[0].delta.content);\r\n        //     }\r\n        // }, () => {\r\n        //     // Stream end\r\n        //     setError('');\r\n        //     setIsWaiting(false);\r\n        //     setFavicon(\"green\");\r\n        // });\r\n\r\n        API.sendChatMessage(chatMessages).then((response) => {\r\n            setIsWaiting(false);\r\n            setFavicon(\"green\");\r\n            if (props.chat == null) { return; }\r\n            cm.updateText(response.choices[0].message.content.trim());\r\n            setError('');\r\n        }).catch((error) => {\r\n            setFavicon(\"red\");\r\n            setIsWaiting(false);\r\n            if (props.chat == null) { return; }\r\n            setError(error.message);\r\n            cm.updateState(ChatState.Finished);\r\n            cm.updateText(\"Error: \" + error.message);\r\n            cm.setRole(ChatRole.ERROR);\r\n        });\r\n    }\r\n\r\n\r\n    function updateEntry(id: string, content?: string) {\r\n        if (props.chat == null) { return; }\r\n\r\n        let chat = props.chat.getChat(id);\r\n        if (!chat || !chat.parent) { return; }\r\n\r\n        let ce = new ChatEntry({ content: content || \"\", role: chat.message.role }, null, ChatState.Finished)\r\n        if (ce.message.role == ChatRole.ERROR) ce.message.role = ChatRole.ASSISTANT;\r\n        chat.parent.addChild(ce)\r\n\r\n        if (chat.message.role == ChatRole.USER) {\r\n            let ce2 = new ChatEntry({ content: \"...\", role: ChatRole.ASSISTANT }, null, ChatState.Waiting)\r\n            ce.addChild(ce2)\r\n            QueryChatBot(ce2);\r\n        } else if (content === undefined)\r\n            QueryChatBot(ce);\r\n    }\r\n\r\n    const hasChats = props.chat.getChats().length > 0;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"chat-title d-flex justify-content-between\">\r\n                <ChatTitle chat={props.chat} />\r\n                <div>\r\n                    {hasChats && <button className=\"btn btn-outline-secondary\" onClick={saveChat} title=\"Download chat\"><FontAwesomeIcon icon={faDownload} /></button>}\r\n                    {!hasChats && <div className='input-group'>\r\n                        <input type=\"file\" className=\"form-control\" onChange={handleFileInputChange} />\r\n                        <button className=\"btn btn-outline-secondary\" onClick={uploadChat} title=\"Upload chat\"><FontAwesomeIcon icon={faUpload} /></button>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n\r\n            <div className='chat'>\r\n                {props.chat && props.chat.getChats().map((chat) => {\r\n                    return <ChatMessageView entry={chat} key={chat.id} updateEntry={updateEntry} />\r\n                })}\r\n\r\n                <div>{IsWaiting && <div className=\"d-flex\"><span className=\"loader\"></span><FontAwesomeIcon icon={faCancel} onClick={ () => API && API.abort()} /></div>}</div>\r\n                \r\n                <ChatInput onChange={function (e: string): void {\r\n                    sendText(e);\r\n                }} />\r\n                \r\n                <div className='d-flex chat-footer' >\r\n                    <span className='text-secondary'>Tokens in this chat: {props.chat.ChatTokens} / {props.chat.max_tokens}</span>\r\n                    {props.chat.ChatTokens >= props.chat.max_tokens && <div className=\"d-flex\">\r\n                        <div className='px-2 text-warning-emphasis'>Earlier messages will not be sent </div>\r\n                        <div className=\"form-check\">\r\n\r\n                            <input className=\"form-check-input text-secondary\" type=\"checkbox\" defaultChecked={props.chat.keep_first} id=\"flexCheckDefault\" onChange={() => props.chat && props.chat.setKeepFirst(!props.chat.keep_first)} />\r\n                            <label className=\"form-check-label text-secondary\" htmlFor=\"flexCheckDefault\" >\r\n                                Always send first message\r\n                            </label>\r\n                        </div></div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ChatView = observer(ChatViewInner)","import { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport { Chat, ChatsManager } from '../services/ChatTree';\r\nimport './ChatListEntry.css'\r\n\r\nfunction ChatListEntryInner(props: { chat: Chat, isActive: boolean, ChatList: ChatsManager }) {\r\n\r\n    function setActiveChat() {\r\n        props.ChatList.setActiveChat(props.chat.id);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chatListEntryWrapper\">\r\n            <div className={\"chatListEntry text-center \" + (props.isActive && \"chatListEntry-active\" || \"\")} onClick={setActiveChat}>\r\n                {props.chat.title}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ChatListEntry = observer(ChatListEntryInner)","import React from 'react';\r\nimport { Chat } from '../services/ChatTree';\r\nimport { ChatView } from './Chat';\r\nimport { observer } from \"mobx-react\"\r\nimport { ChatListEntry } from './ChatListEntry';\r\nimport { apiManager } from '../services/api';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\n// Circular reference in data structure makes this fail\r\n// autorun(() => {\r\n//     console.log(\"Chat list saved\")\r\n//     ChatList.save();\r\n// })\r\n\r\nfunction ChatsDataInner() {\r\n\r\n    const profile = apiManager.getActiveProfile();\r\n    if (profile == null) {\r\n        return <Navigate to=\"/apikey\" />;\r\n    }\r\n    const ChatList = profile.chatsManager;\r\n    const activeChat = ChatList.getActiveChat;\r\n\r\n    return (\r\n        <div className='row'>\r\n            <div className='col-2'>\r\n                <h2>Chats</h2>\r\n                <div className='d-grid'>\r\n                    <button type='button' className=\"btn btn-primary btn-sm\" onClick={() => ChatList.addChat(new Chat(\"Chat\"))}>\r\n                        +\r\n                    </button>\r\n                </div>\r\n                {ChatList.getChats.map((chatEntry) => {\r\n                    return (\r\n                        <div key={chatEntry.id}>\r\n                            <ChatListEntry chat={chatEntry}\r\n                                isActive={activeChat != null && chatEntry.id == activeChat.id}\r\n                                ChatList={ChatList} />\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <div className='col-10 overflow-auto'>\r\n                {activeChat && <ChatView chat={activeChat} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ChatsData = observer(ChatsDataInner);","import React from 'react';\nimport './App.css';\nimport { APIKeyInput } from './components/ApiKeyInput';\n\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n} from \"react-router-dom\";\n\nimport { ChatsData } from './components/ChatList';\nimport { observer } from 'mobx-react';\n\nfunction AppInner() {\n\n  return (\n    <div className=\"container vh-100\">\n        <BrowserRouter>\n          <h1>ChitChat</h1>\n          <Routes>\n            <Route path=\"/\" element={<Navigate to=\"/apikey\" />} />\n            <Route path=\"/apikey\" element={<APIKeyInput />} />\n            <Route path=\"/chats\" element={<ChatsData />} />\n        </Routes>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport const App = observer(AppInner);\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}